/*
 * Copyright (c) 2019 - now, Eggroll Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 */

syntax = "proto3";

package com.webank.eggroll.core.meta;

message Endpoint {
  string host = 1;
  int32 port = 2;
}

message ServerNode {
  int64 id = 1;
  string name = 2;
  int64 clusterId = 3;
  Endpoint endpoint = 4;
  string nodeType = 5;
  string status = 6;
}

message ServerCluster {
  int64 id = 1;
  string name = 2;
  repeated ServerNode serverNodes = 3;
  string tag = 4;
}

message Processor {
  int64 id = 1;
  int64 serverNodeId = 2;
  string name = 3;
  string processorType = 4;
  string status = 5;
  Endpoint commandEndpoint = 6;
  Endpoint transferEndpoint = 7;
  int32 pid = 9;
  map<string, string> options = 8;
  string tag = 10;
}

message ProcessorBatch {
  int64 id = 1;
  string name = 2;
  repeated Processor processors = 3;
  string tag = 4;
}

message Functor {
  string name = 1;
  string serdes = 2;
  bytes body = 3;
  map<string, string> options = 4;
}

message Pair {
  bytes key = 1;
  bytes value = 2;
}

message PairBatch {
  repeated Pair pairs = 1;
}

message StoreLocator {
  int64 id = 1;
  string storeType = 2;
  string namespace = 3;
  string name = 4;
  string path = 5;
  int32 totalPartitions = 6;
  string partitioner = 7;
  string serdes = 8;
}

message Store {
  StoreLocator storeLocator = 1;
  repeated Partition partitions = 2;
  map<string, string> options = 3;
}

message StoreList {
    repeated Store stores = 1;
}

message Partition {
  int32 id = 1;
  StoreLocator storeLocator = 2;
  Processor processor = 3;
  int64 serverNodeId = 4;
  int32 rankInNode = 5;
}

message CallInfo {
  string callSeq = 1;
}

// todo: add job / task status
message Job {
  string id = 1;
  string name = 2;
  repeated Store inputs = 3;
  repeated Store outputs = 4;
  repeated Functor functors = 5;
  map<string, string> options = 6;
}

message Task {
  string id = 1;
  string name = 2;
  repeated Partition inputs = 3;
  repeated Partition outputs = 4;
  Job job = 5;
}

message SessionMeta {
  string id = 1;
  string name = 2;
  string status = 3;
  string tag = 4;
  repeated Processor processors = 5;
  map<string, string> options = 6;
}