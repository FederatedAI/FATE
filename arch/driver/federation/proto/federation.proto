/*
 * Copyright 2019 The FATE Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "basic-meta.proto";
import "storage-basic.proto";

package com.webank.ai.fate.api.driver.federation;

// federation learning participant
message Party {
    string partyId = 1;
    string name = 2;
}

// data description for data to transfer
message TransferDataDesc {
    TransferDataType transferDataType = 1;
    com.webank.ai.eggroll.api.storage.StorageLocator storageLocator = 2;
    bytes taggedVariableName = 3;       // must be in form of "tag-readVariableName"
}

// transfer configuration
message TransferConf {
    int64 overallTimeout = 1;           // total timeout, in ms
    int64 completionWaitTimeout = 2;    // timeout for waiting for complete, in ms
    int64 packetIntervalTimeout = 3;    // timeout for packet interval, in ms
}

enum TransferStatus {
    NOT_PROCESSED = 0;
    INITIALIZING = 1;
    PROCESSING = 2;
    COMPLETE = 3;
    ERROR = 4;
    CANCELLED = 5;
}

enum TransferType {
    SEND = 0;
    RECV = 1;
}

enum TransferDataType {
    NOT_SPECIFIED = 0;
    DTABLE = 1;
    OBJECT = 2;
}

// transfer meta data
message TransferMeta {
    com.webank.ai.eggroll.api.core.Job job = 1;                    // job description
    string tag = 2;                                             // unique transfer tag for this job
    Party src = 3;                                              // data source, also transfer initiator, data sender
    Party dst = 4;                                              // data destination, data receiver
    TransferDataDesc dataDesc = 5;                              // data description for data to send
    TransferType type = 6;                                      // transfer type
    TransferStatus transferStatus = 7;                          // transfer status to mark whether the transfer is sucessful or not
    TransferConf conf = 8;                                      // configuration for transfer
    com.webank.ai.eggroll.api.core.ReturnStatus returnStatus = 9;  // error code and message for this transfer operation
}

// submit transfer job
service TransferSubmitService {
    rpc send (TransferMeta) returns (TransferMeta);             // send data
    rpc recv (TransferMeta) returns (TransferMeta);             // receive data, i.e. wait for data to arrive
    rpc checkStatusNow (TransferMeta) returns (TransferMeta);   // check the transfer status, return immediately
    rpc checkStatus (TransferMeta) returns (TransferMeta);      // check the transfer status, block until finished or default timeout
}
