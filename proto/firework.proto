/*
 * Copyright 2019 The Eggroll Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package com.firework.cluster.rpc;

message   QueryRouterRequest{

}
message   QueryRouterResponse{

}

message   PingRequest {
    int64 timestamp = 1;
    int32 type = 2;
}
message   PingResponse {

}

message   TokenRequest {
    string resource = 1;
    bool   priority = 2;
    int32  count = 3;
}

message  TokenResponse {
    int32 status = 1;
    int32 remainingCount = 2;
    int32 waitInMs = 3;
}

message QueryFlowRuleRequest{
     int32    type = 1;
     string   resource = 2;
}
message QueryFlowRuleResponse{
     int32  type =1;
     int32  status =2;
     string result = 3;
}


//message  HeartbeatRequest{
//  bytes data = 1;
//}


//message  HeartbeatResponse{
//  int32 code = 1;
//  string msg = 2;
//}


message  ApplyTransferQueueRequest{
  string  instanceId = 1;
  string  transferId = 2;
  string  sessionId = 3;

}


message  ApplyTransferQueueResponse{
  int32  code = 1;
  string msg = 2;
  string transferId = 3;
  string instanceId = 4;
  int64  applyTimestamp = 5;
}
 message   UnRegisterTransferQueueRequest{
  string transferId = 1;
  string instanceId = 2;
 }

 message   UnRegisterTransferQueueResponse{
  int32  code = 1;
  string msg = 2;
 }


 message CancelClusterTransferRequest{
   string transferId = 1;
   string sessionId = 2;
   string from = 3;

 }

message CancelClusterTransferResponse{
  int32  code = 1;
  string msg = 2;
}






message  HeartbeatRequest{
  string group = 1;
  string remoteId = 2;
  string localId = 3;
  string leaderId = 4;
  int64  term = 5;
  int32  code = 6;
}


message  HeartbeatResponse{
  string group = 1;
  string remoteId = 2;
  string localId = 3;
  string leaderId = 4;
  int64  term = 5;
  int32  code = 6;
}


message VoteRequest{
  string group = 1;
  string remoteId = 2;
  string localId = 3;
  string leaderId = 4;
  int64  term = 5;
  int64  ledgerEndIndex = 6;
  int64  ledgerEndTerm = 7;
  int32  code = 8;
}

message VoteResponse{




  string group = 1;
  string remoteId = 2;
  string localId = 3;
  string leaderId = 4;
  int64  term = 5;
  string  voteResult =6;
  int32  code  = 7;

}



message LeadershipTransferRequest{
  string group = 1;
  string remoteId = 2;
  string localId = 3;
  string leaderId = 4;
  int64  term = 5;
  int32  code = 6;
  string transferId =7;
  string transfereeId =8;
  int64 takeLeadershipLedgerIndex=9;

}
message LeadershipTransferResponse{
  string group = 1;
  string remoteId = 2;
  string localId = 3;
  string leaderId = 4;
  int64  term = 5;
  int32  code = 6;
}



// data transfer service
service FireworkService {
    rpc applyToken (TokenRequest) returns (TokenResponse);
    rpc queryRouter (QueryRouterRequest) returns (TokenResponse);
    rpc ping (PingRequest) returns (PingResponse);
    rpc queryFlowRule(QueryFlowRuleRequest) returns (QueryFlowRuleResponse);
  //  rpc heartBeat(HeartbeatRequest) returns (HeartbeatResponse);

  rpc vote(VoteRequest) returns (VoteResponse);
  rpc heartBeat(HeartbeatRequest) returns (HeartbeatResponse);

  rpc  leadershipTransfer(LeadershipTransferRequest) returns (LeadershipTransferResponse);
    rpc applyTransferQueue (ApplyTransferQueueRequest) returns (ApplyTransferQueueResponse);
    rpc unRegisterTransferQueue(UnRegisterTransferQueueRequest) returns (UnRegisterTransferQueueResponse);
    rpc cancelClusterTransfer(CancelClusterTransferRequest) returns (CancelClusterTransferResponse);

}

