/*
 * Copyright 2019 The Eggroll Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "storage-basic.proto";

package com.webank.ai.eggroll.api.storage;

/*
 *
 * Note: data stored in storageLocator in put/putIfAbsent/putAll/delete/get/iterate rpc calls is
 * in header of each operation
 *
**/

message Range {
    bytes start = 1;
    bytes end = 2;
    int64 minChunkSize = 3;
}

message Empty {

}

message Operand {
    bytes key = 1;
    bytes value = 2;
}

message Count {
    int64 value = 1;
}

message CreateTableInfo {
    com.webank.ai.eggroll.api.storage.StorageLocator storageLocator = 1;
    int32 fragmentCount = 2;
}

// service for actual storage operation
service KVService {
    rpc createIfAbsent (CreateTableInfo) returns (CreateTableInfo); // create a table
    rpc put (Operand) returns (Empty);                              // put an entry to table
    rpc putIfAbsent (Operand) returns (Operand);                    // put an entry to table if absent
    rpc putAll (stream Operand) returns (Empty);                    // put entries to table (entries will be streaming in)
    rpc delOne (Operand) returns (Operand);                         // delete an entry from table
    rpc get (Operand) returns (Operand);                            // get an entry from table
    rpc iterate (Range) returns (stream Operand);                   // iterate through a table. Response entries are ordered
    rpc destroy (Empty) returns (Empty);                            // destroy a table
    rpc destroyAll (Empty) returns (Empty);                         // destroy multiple tables
    rpc count (Empty) returns (Count);                              // count record amount of a table
}