/*
 * Copyright 2019 The Eggroll Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "basic-meta.proto";

package com.webank.ai.eggroll.api.framework.meta.service;

// Service to operate storage metadata
service StorageMetaService {
    rpc createTable (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc createTableIfAbsent (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc updateTable (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);

    rpc createFragmentsForTable (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc updateFragment (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);

    rpc getTableById (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getTable (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getTables (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getFragmentById (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getFragmentsByTableId (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);

    rpc getStorageNodesByTableId (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getEggNodeManagerByIp (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getNodeById (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getNodesByIds (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getNodesOfStatus (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getNodes (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
}

// service to change node status
service ClusterMetaService {
    rpc registerNode (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc deregisterNode (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc heartbeat (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
}

// will be implemented in stage 2
service TaskMetaService {
    rpc createTask (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc updateTask (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc createResult (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc updateResult (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
    rpc getResultById (com.webank.ai.eggroll.api.core.CallRequest) returns (com.webank.ai.eggroll.api.core.CallResponse);
}

